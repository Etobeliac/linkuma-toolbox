# scripts/utils.py

import openai
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def set_api_key(api_key: str):
    """Set the OpenAI API key."""
    openai.api_key = api_key

def create_collections_from_gpt(thematic, product_names):
    """Generate collections using GPT based on the store theme and product names."""
    try:
        # Log to indicate that the API will be used to generate collections
        logging.info("Using ChatGPT to create store collections.")

        # Prepare the prompt to generate collections
        prompt = (
            f"Créer jusqu'à un maximum de 30 collections et sous-collections, "
            f"en fonction de la thématique de la boutique '{thematic}' et des noms de mes produits "
            f"'{', '.join(product_names)}', pour une boutique e-commerce. "
            f"Je veux au moins 5 catégories, mais pas plus de 30, et uniquement le résultat sans commentaires supplémentaires."
        )

        # Call the OpenAI API to generate the collections
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500  # Adjust if needed
        )

        # Extract and return the generated collections
        collections = response.choices[0].message.content.strip().split("\n")
        logging.info("Collections successfully generated by ChatGPT.")
        return [c.strip() for c in collections if c.strip()]
    except Exception as e:
        logging.error(f"Error when calling the OpenAI API for collection generation: {e}")
        return []

def categorize_products_with_collections(products, collections):
    """Categorize products based on generated collections."""
    categorized_products = {}
    logging.info("Starting product categorization...")

    for product in products:
        categories = []
        # Logic to categorize: associate the product with generated collections
        for collection in collections:
            if any(word.lower() in product.lower() for word in collection.split()):
                categories.append(collection)

        # Ensure at least one category is found for each product
        if not categories:
            # If no categories found, add a generic category
            categories.append("Divers / Non Spécifié")

        categorized_products[product] = categories

    logging.info("Product categorization completed.")
    return categorized_products
